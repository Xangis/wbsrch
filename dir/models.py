# -*- coding: utf-8 -*-
from django.db import models
from django.template.defaultfilters import truncatechars
from django.utils import timezone
from simhash import Simhash
import random
import uuid

import django.db.models.options as options
options.DEFAULT_NAMES = options.DEFAULT_NAMES + ('in_db',)

language_list = ['en', 'an', 'ca', 'cs', 'cy', 'de', 'el', 'es', 'et', 'eu', 'fi', 'fr', 'gl', 'ha', 'hr', 'hu', 'it', 'lt', 'lv', 'nl', 'pl', 'pt', 'ro', 'rw', 'sl', 'sn', 'so', 'sv', 'sw', 'tr', 'wo', 'xh', 'yo', 'zu']
hidden_language_list = ['ha', 'rw', 'sn', 'so', 'wo', 'xh', 'yo', 'zu']
# language_list = ['en', 'de', 'fr', 'es', 'pl', 'it', 'nl', 'pt', 'tr', 'cs', 'ro', 'el', 'sv', 'da', 'hu', 'hr', 'sk', 'lt', 'no', 'fi', 'et', 'lv', 'sl', 'is', 'sw', 'yo', 'so', 'wo', 'ha', 'rw', 'sn', 'ca']

# Only including languages that aren't also a valid country. This means that "ar", which could be argentina,
# and "uk" which could be the united kingdom, are not listed as blocked. Doing so could cause it to auto-delete
# some sites in English or Spanish.
blocked_language_list = ['am', 'ar', 'as', 'az', 'be', 'bg', 'bn', 'cn', 'dz', 'fa', 'gu', 'he',
                         'hi', 'hy', 'id', 'ja', 'jv', 'ka', 'kk', 'km', 'kn', 'ko', 'ku', 'ky',
                         'lo', 'mk', 'ml', 'mn', 'mr', 'ms', 'ne', 'or', 'pa', 'ps', 'ru', 'si',
                         'sq', 'sr', 'ta', 'te', 'th', 'tl', 'ug', 'uk', 'ur', 'vi', 'zh']

language_names = {
'an': 'Aragonese',
'ca': 'Catalan',
'cs': 'Czech',
'cy': 'Welsh',
'da': 'Danish',
'de': 'German',
'el': 'Greek',
'en': 'English',
'et': 'Estonian',
'eu': 'Basque',
'es': 'Spanish',
'fi': 'Finnish',
'fr': 'French',
'gl': 'Galician',
'ha': 'Hausa',
'hr': 'Croatian',
'hu': 'Hungarian',
'is': 'Icelandic',
'it': 'Italian',
'lt': 'Lithuanian',
'lv': 'Latvian',
'nl': 'Dutch',
'no': 'Norwegian',
'pl': 'Polish',
'pt': 'Portuguese',
'tr': 'Turkish',
'ro': 'Romanian',
'rw': 'Rwandan',
'sk': 'Slovakian',
'sl': 'Slovene',
'sv': 'Swedish',
'sw': 'Swahili',
'sn': 'Shona',
'so': 'Somali',
'wo': 'Wolof',
'xh': 'Xhosa',
'yo': 'Yoruba',
'zu': 'Zulu',
}

blocked_language_names = {
'arabic': 'ar',
'armenian': 'am',
'assamese': 'as',
'azerbaijani': 'az',
'belarusian': 'be',
'bengali': 'bn',
'bulgarian': 'bg',
'burmese': 'my',
'chinese': 'zh',
'dzongkha': 'dz',
'farsi': 'fa',
'georgian': 'ge',
'hebrew': 'he',
'hindi': 'hi',
'indonesian': 'id',
'japanese': 'ja',
'javanese': 'jv',
'kannada': 'kn',
'kazakh': 'kk',
'khmer': 'km',
'korean': 'ko',
'kurdish': 'ku',
'lao': 'lo',
'macedonian': 'mk',
'malay': 'ms',
'malayalam': 'ml',
'marathi': 'mr',
'mongolian': 'mn',
'nepali': 'ne',
'oriya': 'or',
'punjabi': 'pa',
'pashto': 'ps',
'persian': 'fa',
'russian': 'ru',
'serbian': 'sr',
'sinhala': 'si',
'tagalog': 'tl',
'tamil': 'ta',
'telugu': 'te',
'thai': 'th',
'ukranian': 'uk',
'uyghur': 'ug',
'urdu': 'ur',
'vietnamese': 'vi',
}

month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

EXCLUDED_SITE_REASONS = (
        # Anything by Demand Media or any sites that use similar tactics.
        (0, 'Content Farm'),
        # Sites that just aggregate or copy the content from other sites, i.e. Digg.
        (1, 'Aggregator or Meta Site'),
        # Social media sites like Facebook, Twitter, etc.
        (2, 'Social'),
        # Bait-and-switch sites that obfuscate content but still make it search-engine-able, like ExpertSexChange.com.
        (3, 'Bait and Switch'),
        # Adult website - we don't index those.
        (4, 'Porn or Adult Content'),
        # Pills/pharmacy.
        (5, 'Pills'),
        # Gambling
        (6, 'Online Gambling'),
        # Autogenerated site or otherwise overrun with spambots.
        (7, 'Spam or Computer Generated Content'),
        # Not a language we include in our index.
        (8, 'Unindexed Language - Unspecified'),
        (37, 'Unindexed Language - Albanian'),
        (45, 'Unindexed Language - Amharic'),
        (20, 'Unindexed Language - Arabic or Farsi'),
        (32, 'Unindexed Language - Armenian'),
        (50, 'Unindexed Language - Assamese'),
        (34, 'Unindexed Language - Azerbaijani'),
        (59, 'Unindexed Language - Belarusian'),
        (60, 'Unindexed Language - Bangladeshi'),
        (21, 'Unindexed Language - Chinese'),
        (56, 'Unindexed Language - Dzongkha'),
        (31, 'Unindexed Language - Georgian'),
        (46, 'Unindexed Language - Gujarati'),
        (22, 'Unindexed Language - Hebrew'),
        (23, 'Unindexed Language - Hindi'),
        (24, 'Unindexed Language - Indonesian or Similar'),
        (25, 'Unindexed Language - Japanese'),
        (49, 'Unindexed Language - Javanese'),
        (58, 'Unindexed Language - Kannada'),
        (43, 'Unindexed Language - Kazakh'),
        (26, 'Unindexed Language - Khmer'),
        (27, 'Unindexed Language - Korean'),
        (44, 'Unindexed Language - Kyrgyz'),
        (47, 'Unindexed Language - Kurdish'),
        (54, 'Unindexed Language - Lao'),
        (41, 'Unindexed Language - Macedonian'),
        (55, 'Unindexed Language - Marathi'),
        (61, 'Unindexed Language - Malayalam'),
        (48, 'Unindexed Language - Mongolian'),
        (52, 'Unindexed Language - Nepali'),
        (57, 'Unindexed Language - Oriya'),
        (39, 'Unindexed Language - Punjabi'),
        (40, 'Unindexed Language - Pashto'),
        (28, 'Unindexed Language - Russian or Other Cyrillic'),
        (33, 'Unindexed Language - Serbian'),
        (36, 'Unindexed Language - Sinhala'),
        (38, 'Unindexed Language - Tagalog'),
        (51, 'Unindexed Language - Tamil'),
        (42, 'Unindexed Language - Telugu'),
        (30, 'Unindexed Language - Thai'),
        (53, 'Unindexed Language - Uighur'),
        (35, 'Unindexed Language - Urdu'),
        (29, 'Unindexed Language - Vietnamese'),
        # Warez/torrent/crack/piracy sites.
        (9, 'Piracy'),
        # Sites that encourage human rights violations, racism, general douchebaggery.
        (10, 'Human Rights Abuses'),
        # This isn't a web site - it's an ad server.
        (11, 'Ad Server'),
        # URL shortener. Not actual content.
        (12, 'URL Shortener'),
        # No content. Not any actual content on this site.
        (13, 'No Content'),
        # No content. Not any actual content on this site.
        (14, 'Malware'),
        # BEGIN SITE RANK INCREASE REASONS - DON'T USE FOR BLOCKING
        # High-Quality Content
        (200, 'Quality Content'),
        # Partner site (or owned site)
        (201, 'Partner Site'),
)

RANK_ADJUSTMENTS = (
    (-3, 'Bottom'),
    (-2, 'Much Lower'),
    (-1, 'Slightly Lower'),
    (-4, 'Marginally Lower'),
    (0, 'Normal'),
    (1, 'Slightly Higher'),
    (2, 'Much Higher'),
)

class BlockedSite(models.Model):
    url = models.TextField(blank=False, unique=True, db_index=True)
    reason = models.IntegerField(null=True, blank=True, choices=EXCLUDED_SITE_REASONS)
    detailedreason = models.TextField(blank=True)
    exclude_subdomains = models.BooleanField(default=False, blank=True)
    date_added = models.DateField(auto_now_add=True, db_index=True)

    class Meta:
        in_db = 'indexes'

    def __str__(self):
        return self.url

    def save(self, remove=True, *args, **kwargs):
        if remove:
            from dir.utils import RemoveURLsForDomain
            RemoveURLsForDomain(self.url)
            # Delete any URLs that use that scheme if they are in the database.
        super(BlockedSite, self).save(*args, **kwargs)

class IPAddress(models.Model):
    ip = models.CharField(max_length=16, blank=False, null=False, unique=True)
    spam_commenter = models.BooleanField(default=False, blank=True)
    date_added = models.DateField(auto_now_add=True)
    last_updated = models.DateField(auto_now=True)

    class Meta:
        in_db = 'indexes'

class BadQuery(models.Model):
    """
    Represents a search request that should be considered a "bad request" and return a 400 error.

    This is used to discourage spambots and short-circuit their requests and prevent them from
    hitting the search index.

    We may want to expand this to include wildcards at some point. For now, we're just blocking
    individual phrases.
    """
    keywords = models.CharField(max_length=260, null=False, unique=True)
    date_added = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.keywords

    class Meta:
        in_db = 'indexes'
        ordering = ['keywords', ]

class URLInfo(models.Model):
    rooturl = models.CharField(max_length=260, blank=True, null=False)
    url = models.CharField(max_length=2048, blank=True, null=False, unique=True)
    pagetitle = models.CharField(max_length=260, blank=True, null=True)
    pagedescription = models.CharField(max_length=320, blank=True, null=True)
    pagefirstheadtag = models.CharField(max_length=260, blank=True, null=True)
    pagefirsth2tag = models.CharField(max_length=260, blank=True, null=True)
    pagefirsth3tag = models.CharField(max_length=260, blank=True, null=True)
    pagekeywords = models.CharField(max_length=260, blank=True, null=True)
    pagecontents = models.TextField(blank=True, null=True)
    pagetext = models.TextField(blank=True, null=True)
    pagesize = models.IntegerField(null=True, blank=True)
    lastcrawled = models.DateTimeField(null=True, blank=True)
    firstcrawled = models.DateTimeField(null=True, blank=True)  # Note that this won't be accurate for pages recrawled before 2015-09-22.
    ip = models.CharField(max_length=16, blank=True, null=True, db_index=True)
    num_errors = models.IntegerField(blank=True, default=0)
    error_info = models.TextField(blank=True, default='')
    server_header = models.CharField(max_length=128, null=True, blank=True)
    content_type_header = models.CharField(max_length=100, null=True, blank=True)
    num_css_files = models.IntegerField(null=True, blank=True, help_text='Number of external CSS files.')
    num_images = models.IntegerField(null=True, blank=True)
    num_javascripts = models.IntegerField(null=True, blank=True, help_text='Number of external JavaScript files.')
    num_iframes = models.IntegerField(null=True, blank=True)
    num_audio_tags = models.IntegerField(null=True, blank=True)
    num_video_tags = models.IntegerField(null=True, blank=True)
    num_svg_tags = models.IntegerField(null=True, blank=True)
    num_canvas_tags = models.IntegerField(null=True, blank=True)
    image_alt_tags = models.TextField(null=True, blank=True)
    image_title_tags = models.TextField(null=True, blank=True)
    image_filenames = models.TextField(null=True, blank=True)
    simhash_value = models.CharField(max_length=128, null=True, blank=True, db_index=True)

    def delete(self, keep_links=False):
        """
        Deletes any outgoing page links when a page is deleted.

        If keep_links is True, we don't delete the links. This is something that
        should be used when moving the site, for instance from the English index
        to the German index.
        """
        if not keep_links:
            links = PageLink.objects.filter(url_source=self.url)
            for link in links:
                link.delete()
            links = PageJavaScript.objects.filter(url_source=self.url)
            for link in links:
                link.delete()
            links = PageIFrame.objects.filter(url_source=self.url)
            for link in links:
                link.delete()
        super(URLInfo, self).delete()

    def save(self, *args, **kwargs):
        # Sets a new random value every time the link is saved.
        if len(self.pagetext) > 0:
            hashval = Simhash(self.pagetext, f=128).value
        else:
            hashval = 0
        self.simhash_value = '{:0128b}'.format(hashval)
        super(URLInfo, self).save(*args, **kwargs)

    @property
    def short_url(self):
        return truncatechars(self.url, 120)

    class Meta:
        abstract = True

class SiteInfo(URLInfo):
    class Meta:
        db_table = 'site_info'

    def __str__(self):
        return self.url

class SiteInfo_cs(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_de(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_el(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_es(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_fi(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_fr(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_hu(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_it(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_nl(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_pl(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_pt(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_sv(URLInfo):

    def __str__(self):
        return self.url

class SiteInfo_tr(URLInfo):

    def __str__(self):
        return self.url

class DomainInfo(models.Model):
    url = models.CharField(max_length=255, unique=True, db_index=True)
    language_association = models.CharField(max_length=8, null=True, blank=True)
    notes = models.TextField(null=True, blank=True)
    rank_adjustment = models.IntegerField(null=False, blank=True, default=0, choices=RANK_ADJUSTMENTS)
    rank_reason = models.IntegerField(null=True, blank=True, choices=EXCLUDED_SITE_REASONS)
    alexa_rank = models.IntegerField(null=True, blank=True)
    alexa_rank_date = models.DateField(null=True, blank=True)
    alexa_outdated = models.BooleanField(blank=True, default=False, db_index=True)
    majestic_rank = models.IntegerField(null=True, blank=True)
    majestic_refsubnets = models.IntegerField(null=True, blank=True)
    majestic_rank_date = models.DateField(null=True, blank=True)
    majestic_outdated = models.BooleanField(blank=True, default=False, db_index=True)
    quantcast_rank = models.IntegerField(null=True, blank=True)
    quantcast_rank_date = models.DateField(null=True, blank=True)
    quantcast_outdated = models.BooleanField(blank=True, default=False, db_index=True)
    blocked_to_crawled_ratio = models.DecimalField(null=True, blank=True, decimal_places=3, max_digits=5)
    domcop_rank = models.IntegerField(null=True, blank=True)
    domcop_pagerank = models.DecimalField(null=True, blank=True, decimal_places=2, max_digits=4)
    domcop_pagerank_date = models.DateField(null=True, blank=True)
    domcop_pagerank_outdated = models.BooleanField(blank=True, default=False, db_index=True)
    uses_language_subdirs = models.BooleanField(default=False, blank=True)
    uses_language_query_parameter = models.BooleanField(default=False, blank=True, help_text='Does this domain use query parameters like "hl=en" to determine the language?')
    uses_langid = models.BooleanField(default=False, blank=True, help_text='Does this domain use langid to categorize individual pages?')
    max_urls = models.IntegerField(null=True, default=None, blank=True)
    is_unblockable = models.BooleanField(blank=True, default=False, help_text='Is this domain unblockable, even by an idiot?')
    domain_created = models.DateTimeField(null=True, blank=True)
    domain_expires = models.DateTimeField(null=True, blank=True)
    domain_updated = models.DateTimeField(null=True, blank=True)  # The last time WbSrch updated the domain.
    whois_last_updated = models.DateTimeField(null=True, blank=True)
    robots_ip = models.CharField(max_length=16, null=True, blank=True, db_index=True, help_text='The IP address of the server we retrieved (or tried to retrieve) the robots.txt from.')
    robots_txt = models.TextField(null=True, blank=True)
    robots_last_updated = models.DateTimeField(null=True, blank=True)
    domains_linking_in = models.IntegerField(null=True, blank=True)
    domains_linking_in_last_updated = models.DateTimeField(null=True, blank=True)
    # This domain has been verified as not porn, so don't suggest it's porn when scanning,
    # and ignore all attempts to pornblock it.
    verified_notporn = models.BooleanField(blank=True, default=False)
    # Only crawl the root url. With or without slash.
    only_crawl_rooturl = models.BooleanField(blank=True, default=False)
    num_urls = models.IntegerField(null=True, blank=True)
    num_urls_last_updated = models.DateField(null=True, blank=True)
    num_keywords_ranked = models.IntegerField(null=True, blank=True)
    num_keywords_last_updated = models.DateField(null=True, blank=True)
    favicons_last_updated = models.DateField(null=True, blank=True)
    whois_name = models.CharField(max_length=80, null=True, blank=True)
    whois_city = models.CharField(max_length=40, null=True, blank=True)
    whois_country = models.CharField(max_length=40, null=True, blank=True)
    whois_state = models.CharField(max_length=40, null=True, blank=True)
    whois_address = models.CharField(max_length=80, null=True, blank=True)
    whois_org = models.CharField(max_length=100, null=True, blank=True)
    whois_registrar = models.CharField(max_length=60, null=True, blank=True)
    whois_zipcode = models.CharField(max_length=40, null=True, blank=True)
    whois_nameservers = models.TextField(null=True, blank=True)
    whois_emails = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.url

class Screenshot(models.Model):
    domain = models.OneToOneField('DomainInfo', db_index=True, unique=True)
    file_large = models.TextField(null=True, blank=True, help_text='1280x800px image file location.')
    file_small = models.TextField(null=True, blank=True, help_text='320x200px image file location.')
    date_taken = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.domain.url

class Favicon(models.Model):
    domain = models.ForeignKey('DomainInfo', db_index=True)
    date_taken = models.DateField(auto_now_add=True)
    icon = models.TextField(null=False, blank=False)
    format = models.CharField(max_length=6, null=False, blank=False)
    width = models.IntegerField()
    height = models.IntegerField()

    def __str__(self):
        return self.domain.url

class AllowedDomain(models.Model):
    """
    When the crawler is in allowed-domain-only mode, this controls what domains can be added
    to the index and the pending URL list.

    All other settings are controlled by the DomainInfo class.
    """
    url = models.CharField(max_length=255, unique=True, db_index=True)

    def __str__(self):
        return self.url


class DomainSuffix(models.Model):
    extension = models.CharField(max_length=30, null=False, blank=False, db_index=True)
    num_known = models.IntegerField(null=True, blank=True)
    num_crawled = models.IntegerField(null=True, blank=True)
    num_blocked = models.IntegerField(null=True, blank=True)
    blocked_to_crawled_ratio = models.DecimalField(null=True, blank=True, decimal_places=2, max_digits=7)
    # Don't make decisions based on this, it's not guaranteed.
    # But we should be able to call categorize_language and have it
    # scan all TLDs tagged with a particular language.
    default_language = models.CharField(max_length=8, null=True, blank=True)
    # This is the score adjustment for the domain suffix when indexing.
    score_adjustment = models.IntegerField(default=0)
    last_updated = models.DateField(null=True, blank=True, auto_now=True)

    def __str__(self):
        return self.extension

    class Meta:
        in_db = 'indexes'
        ordering = ['extension', ]


def RandomValue():
    return random.randint(0, 2000000000)


class CrawlableUrl(models.Model):
    rooturl = models.CharField(max_length=260, db_index=True, null=False, blank=False)
    url = models.TextField(unique=True)
    randval = models.IntegerField(null=False, db_index=True, blank=True)

    def save(self, *args, **kwargs):
        # Sets a new random value every time the link is saved.
        self.randval = RandomValue()
        super(CrawlableUrl, self).save(*args, **kwargs)

    def __str__(self):
        return self.url

    class Meta:
        in_db = 'urls'

class SearchLogBase(models.Model):
    keywords = models.TextField(unique=False, db_index=True)
    result_count = models.IntegerField()
    last_search = models.DateTimeField(auto_now_add=True)
    search_time = models.DecimalField(null=True, blank=True, decimal_places=2, max_digits=6)
    # Are all terms in this search indexed?
    indexed = models.BooleanField(blank=True, default=False)
    referer = models.CharField(max_length=255, null=True, blank=True)
    ip = models.CharField(max_length=16, null=True, blank=True)
    ip_country = models.CharField(max_length=3, null=True, blank=True)
    browserstring = models.CharField(max_length=255, null=True, blank=True)
    is_bot = models.BooleanField(default=False, blank=True)
    search_id = models.UUIDField(null=True, default=uuid.uuid4, editable=False, db_index=True)

    class Meta:
        in_db = 'indexes'
        abstract = True

class SearchLog(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_cs(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_da(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_de(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_el(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_es(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_fi(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_fr(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_hu(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_is(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_it(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_nl(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_no(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_pl(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_pt(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_sk(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_sv(SearchLogBase):

    def __str__(self):
        return self.keywords

class SearchLog_tr(SearchLogBase):

    def __str__(self):
        return self.keywords

class DomainSearchLog(SearchLogBase):
    # What language site was this domain searched from?
    language = models.CharField(max_length=6)

    def __str__(self):
        return self.keywords

class IPSearchLog(SearchLogBase):
    # What language site was this domain searched from?
    language = models.CharField(max_length=6)

    def __str__(self):
        return self.keywords

class PendingIndexBase(models.Model):
    keywords = models.CharField(max_length=240, unique=True)
    date_added = models.DateField(auto_now_add=True)
    reason = models.CharField(max_length=240, blank=True, null=True)

    class Meta:
        in_db = 'indexes'
        abstract = True

class PendingIndex(PendingIndexBase):

    def __str__(self):
        return self.keywords

    class Meta:
        in_db = 'indexes'
        verbose_name_plural = "pending indexes"

class PendingIndex_cs(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_de(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_el(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_es(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_fi(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_fr(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_hu(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_it(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_nl(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_pl(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_pt(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_sv(PendingIndexBase):

    def __str__(self):
        return self.keywords

class PendingIndex_tr(PendingIndexBase):

    def __str__(self):
        return self.keywords

class IndexTermBase(models.Model):
    keywords = models.CharField(max_length=240, unique=True)
    date_indexed = models.DateTimeField(default=timezone.now)
    page_rankings = models.TextField()
    num_results = models.IntegerField(null=True, blank=True, help_text='Number of results shown in search (max 200), or for multi-word, number of exact matches found in the db.')
    num_pages = models.IntegerField(null=True, blank=True, help_text='Number of pages found in the database (max 1000000).')
    index_time = models.DecimalField(null=True, blank=True, decimal_places=2, max_digits=8, help_text='in seconds')
    # Newer batteries-included JSON format for search results.
    search_results = models.TextField(null=True, blank=True)
    actively_blocked = models.BooleanField(default=False, blank=True)
    # Do we refuse to show any search results for this term?
    refused = models.BooleanField(default=False, blank=True)
    typo_for = models.CharField(max_length=240, null=True, blank=True, help_text='A phrase that this search term is a possible typo for.')
    is_language = models.CharField(max_length=4, null=True, blank=True, help_text='This is a word in language X, and will show a link to that index in search results.')
    term_weight = models.IntegerField(null=True, blank=True, help_text='Term weight in percent (for multi-word terms). If set below 100, this term will count less than other words.')

    def save(self, keep_date=False, *args, **kwargs):
        if not keep_date:
            self.date_indexed = timezone.now()
        super(IndexTermBase, self).save(*args, **kwargs)

    class Meta:
        in_db = 'indexes'
        abstract = True

class IndexTerm(IndexTermBase):
    show_ad = models.BooleanField(blank=True, default=False)
    verified_english = models.BooleanField(blank=True, default=False)

    def __str__(self):
        return self.keywords

class IndexTerm_cs(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_de(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_el(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_es(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_fi(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_fr(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_hu(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_it(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_nl(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_pl(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_pt(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_sv(IndexTermBase):

    def __str__(self):
        return self.keywords

class IndexTerm_tr(IndexTermBase):

    def __str__(self):
        return self.keywords

class FeedbackItem(models.Model):
    keywords = models.CharField(max_length=240, null=True, blank=True)
    num_search_results = models.IntegerField(null=True, blank=True)
    comment = models.TextField()
    date_added = models.DateField(auto_now_add=True)
    processed = models.BooleanField(blank=True, default=False)
    ip = models.CharField(max_length=16, null=True, blank=True)
    language = models.CharField(max_length=8, null=True, blank=True)

    class Meta:
        in_db = 'indexes'

    def __str__(self):
        return 'Feedback on ' + self.keywords

class ChangelogItem(models.Model):
    title = models.CharField(max_length=240, null=True, blank=True)
    num_urls_crawled = models.IntegerField(null=True, blank=True)
    num_terms_indexed = models.IntegerField(null=True, blank=True)
    num_domains_blocked = models.IntegerField(null=True, blank=True)
    comment = models.TextField()
    date_added = models.DateField()
    version = models.TextField(null=True, blank=True)

    class Meta:
        in_db = 'indexes'

    def __str__(self):
        return str(self.date_added) + ': ' + self.comment

class Setting(models.Model):
    name = models.CharField(max_length=80)
    value = models.CharField(max_length=120)

    class Meta:
        in_db = 'indexes'

    def __str__(self):
        return self.name + ': ' + self.value

class SiteInfoFull(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos - Full View'

class SiteInfoAfterZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Title After Z'

class SiteInfoH1AfterZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H1 After Z'

class SiteInfoH2AfterZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H2 After Z'

class SiteInfoH3AfterZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H3 After Z'

class SiteInfoGreekAlphabet(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Greek Alphabet'

class SiteInfoH1GreekAlphabet(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H1 Greek Alphabet'

class SiteInfoAfterZEndingInAE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in AE'

class SiteInfoAfterZEndingInAM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in AM'

class SiteInfoAfterZEndingInASIA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in ASIA'

class SiteInfoAfterZEndingInAZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in AZ'

class SiteInfoAfterZEndingInBG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in BG'

class SiteInfoAfterZEndingInBIZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in BIZ'

class SiteInfoAfterZEndingInBH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in BH'

class SiteInfoAfterZEndingInBY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in BY'

class SiteInfoAfterZEndingInBZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in BZ'

class SiteInfoAfterZEndingInCN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in CN'

class SiteInfoAfterZEndingInCOM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in COM'

class SiteInfoAfterZEndingInDZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in DZ'

class SiteInfoAfterZEndingInEE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in EE'

class SiteInfoAfterZEndingInEG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in EG'

class SiteInfoAfterZEndingInFM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in FM'

class SiteInfoAfterZEndingInGE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in GE'

class SiteInfoAfterZEndingInHK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in HK'

class SiteInfoAfterZEndingInIN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in IN'

class SiteInfoAfterZEndingInIL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in IL'

class SiteInfoAfterZEndingInINFO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in INFO'

class SiteInfoAfterZEndingInIR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in IR'

class SiteInfoAfterZEndingInIQ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in IQ'

class SiteInfoAfterZEndingInJO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in JO'

class SiteInfoAfterZEndingInJP(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in JP'

class SiteInfoAfterZEndingInKG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in KG'

class SiteInfoAfterZEndingInKR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in KR'

class SiteInfoAfterZEndingInKW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in KW'

class SiteInfoAfterZEndingInKZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in KZ'

class SiteInfoAfterZEndingInLA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in LA'

class SiteInfoAfterZEndingInLB(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in LB'

class SiteInfoAfterZEndingInLI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in LI'

class SiteInfoAfterZEndingInLY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in LY'

class SiteInfoAfterZEndingInMA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in MA'

class SiteInfoAfterZEndingInMD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in MD'

class SiteInfoAfterZEndingInME(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in ME'

class SiteInfoAfterZEndingInMK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in MK'

class SiteInfoAfterZEndingInMOBI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in MOBI'

class SiteInfoAfterZEndingInMY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in MY'

class SiteInfoAfterZEndingInNET(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in NET'

class SiteInfoAfterZEndingInOM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in OM'

class SiteInfoAfterZEndingInORG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in ORG'

class SiteInfoAfterZEndingInPRO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in PRO'

class SiteInfoAfterZEndingInPS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in PS'

class SiteInfoAfterZEndingInRS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in RS'

class SiteInfoAfterZEndingInQA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in QA'

class SiteInfoAfterZEndingInRU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in RU'

class SiteInfoAfterZEndingInSA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in SA'

class SiteInfoAfterZEndingInSD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in SD'

class SiteInfoAfterZEndingInSG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in SG'

class SiteInfoAfterZEndingInST(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in ST'

class SiteInfoAfterZEndingInSU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in SU'

class SiteInfoAfterZEndingInSY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in SY'

class SiteInfoAfterZEndingInTJ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TJ'

class SiteInfoAfterZEndingInTK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TK'

class SiteInfoAfterZEndingInTM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TM'

class SiteInfoAfterZEndingInTN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TN'

class SiteInfoAfterZEndingInTO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TO'

class SiteInfoAfterZEndingInTV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TV'

class SiteInfoAfterZEndingInTW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in TW'

class SiteInfoAfterZEndingInUA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in UA'

class SiteInfoAfterZEndingInUS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in US'

class SiteInfoAfterZEndingInUZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in UZ'

class SiteInfoAfterZEndingInVG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in VG'

class SiteInfoAfterZEndingInWS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in WS'

class SiteInfoAfterZEndingInYE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in YE'

class SiteInfoAfterZEndingInP1AI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos After Z ending in --P1AI'

class SiteInfoBeforeZero(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Before 0'

class SiteInfoH1BeforeZero(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H1 Before 0'

class SiteInfoH2BeforeZero(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H2 Before 0'

class SiteInfoH3BeforeZero(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos H3 Before 0'

class SiteInfoEndingInADULT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .adult'

class SiteInfoEndingInAD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ad'

class SiteInfoEndingInAE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ae'

class SiteInfoEndingInAERO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .aero'

class SiteInfoEndingInAF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .af'

class SiteInfoEndingInAI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ai'

class SiteInfoEndingInAL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .al'

class SiteInfoEndingInAM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .am'

class SiteInfoEndingInAN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .an'

class SiteInfoEndingInAO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ao'

class SiteInfoEndingInAQ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .aq'

class SiteInfoEndingInAR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ar'

class SiteInfoEndingInASIA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .asia'

class SiteInfoEndingInAT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .at'

class SiteInfoEndingInAU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .au'

class SiteInfoEndingInAW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .aw'

class SiteInfoEndingInAZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .az'

class SiteInfoEndingInBA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ba'

class SiteInfoEndingInBB(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bb'

class SiteInfoEndingInBD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bd'

class SiteInfoEndingInBE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .be'

class SiteInfoEndingInBERLIN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .berlin'

class SiteInfoEndingInBF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bf'

class SiteInfoEndingInBG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bg'

class SiteInfoEndingInBH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bh'

class SiteInfoEndingInBI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bi'

class SiteInfoEndingInBIZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .biz'

class SiteInfoEndingInBO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bo'

class SiteInfoEndingInBJ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bj'

class SiteInfoEndingInBN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bn'

class SiteInfoEndingInBRManager(models.Manager):
    def get_queryset(self):
        return super(SiteInfoEndingInBRManager, self).get_queryset().filter(rooturl__endswith='.br')

class SiteInfoEndingInBR(SiteInfo):
    objects = SiteInfoEndingInBRManager()
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .br'

class SiteInfoEndingInBS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bs'

class SiteInfoEndingInBT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bt'

class SiteInfoEndingInBW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bw'

class SiteInfoEndingInBY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .by'

class SiteInfoEndingInBZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .bz'

class SiteInfoEndingInCA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ca'

class SiteInfoEndingInCAT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cat'

class SiteInfoEndingInCC(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cc'

class SiteInfoEndingInCD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cd'

class SiteInfoEndingInCF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cf'

class SiteInfoEndingInCG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cg'

class SiteInfoEndingInCH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ch'

class SiteInfoEndingInCI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ci'

class SiteInfoEndingInCK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ck'

class SiteInfoEndingInCL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cl'

class SiteInfoEndingInCM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cm'

class SiteInfoEndingInCN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cn'

class SiteInfoEndingInCO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .co'

class SiteInfoEndingInCOM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .com'

class SiteInfoEndingInCR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cr'

class SiteInfoEndingInCU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cu'

class SiteInfoEndingInCV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cv'

class SiteInfoEndingInCW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cw'

class SiteInfoEndingInCX(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cx'

class SiteInfoEndingInCY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cy'

class SiteInfoEndingInCZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .cz'

class SiteInfoEndingInDE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .de'

class SiteInfoEndingInDJ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .dj'

class SiteInfoEndingInDK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .dk'

class SiteInfoEndingInDM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .dm'

class SiteInfoEndingInDO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .do'

class SiteInfoEndingInDZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .dz'

class SiteInfoEndingInEC(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ec'

class SiteInfoEndingInEDU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .edu'

class SiteInfoEndingInEE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ee'

class SiteInfoEndingInEG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .eg'

class SiteInfoEndingInER(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .er'

class SiteInfoEndingInES(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .es'

class SiteInfoEndingInET(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .et'

class SiteInfoEndingInEU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .eu'

class SiteInfoEndingInEUS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .eus'

class SiteInfoEndingInFI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .fi'

class SiteInfoEndingInFJ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .fj'

class SiteInfoEndingInFK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .fk'

class SiteInfoEndingInFO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .fo'

class SiteInfoEndingInFR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .fr'

class SiteInfoEndingInFRL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .frl'

class SiteInfoEndingInGA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ga'

class SiteInfoEndingInGAL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gal'

class SiteInfoEndingInGD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gd'

class SiteInfoEndingInGE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ge'

class SiteInfoEndingInGF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gf'

class SiteInfoEndingInGH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gh'

class SiteInfoEndingInGI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gi'

class SiteInfoEndingInGL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gl'

class SiteInfoEndingInGM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gm'

class SiteInfoEndingInGN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gn'

class SiteInfoEndingInGQ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gq'

class SiteInfoEndingInGR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gr'

class SiteInfoEndingInGT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gt'

class SiteInfoEndingInGU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gu'

class SiteInfoEndingInGURU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .guru'

class SiteInfoEndingInGW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gw'

class SiteInfoEndingInGY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .gy'

class SiteInfoEndingInHK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .hk'

class SiteInfoEndingInHM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .hm'

class SiteInfoEndingInHN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .hn'

class SiteInfoEndingInHR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .hr'

class SiteInfoEndingInHT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ht'

class SiteInfoEndingInHU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .hu'

class SiteInfoEndingInID(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .id'

class SiteInfoEndingInIL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .il'

class SiteInfoEndingInIN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .in'

class SiteInfoEndingInINFO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .info'

class SiteInfoEndingInIQ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .iq'

class SiteInfoEndingInIR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ir'

class SiteInfoEndingInIS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .is'

class SiteInfoEndingInIT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .it'

class SiteInfoEndingInJO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .jo'

class SiteInfoEndingInJP(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .jp'

class SiteInfoEndingInKE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ke'

class SiteInfoEndingInKG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kg'

class SiteInfoEndingInKH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kh'

class SiteInfoEndingInKI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ki'

class SiteInfoEndingInKM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .km'

class SiteInfoEndingInKN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kn'

class SiteInfoEndingInKO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ko'

class SiteInfoEndingInKP(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kp'

class SiteInfoEndingInKR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kr'

class SiteInfoEndingInKW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kw'

class SiteInfoEndingInKZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .kz'

class SiteInfoEndingInLA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .la'

class SiteInfoEndingInLB(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lb'

class SiteInfoEndingInLC(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lc'

class SiteInfoEndingInLI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .li'

class SiteInfoEndingInLK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lk'

class SiteInfoEndingInLR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lr'

class SiteInfoEndingInLS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ls'

class SiteInfoEndingInLT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lt'

class SiteInfoEndingInLU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lu'

class SiteInfoEndingInLV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .lv'

class SiteInfoEndingInMA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ma'

class SiteInfoEndingInMC(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mc'

class SiteInfoEndingInMD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .md'

class SiteInfoEndingInME(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .me'

class SiteInfoEndingInMG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mg'

class SiteInfoEndingInMK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mk'

class SiteInfoEndingInML(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ml'

class SiteInfoEndingInMM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mm'

class SiteInfoEndingInMN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mn'

class SiteInfoEndingInMO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mo'

class SiteInfoEndingInMOBI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mobi'

class SiteInfoEndingInMQ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mq'

class SiteInfoEndingInMR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mr'

class SiteInfoEndingInMU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mu'

class SiteInfoEndingInMV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mv'

class SiteInfoEndingInMW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mw'

class SiteInfoEndingInMX(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mx'

class SiteInfoEndingInMY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .my'

class SiteInfoEndingInMZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .mz'

class SiteInfoEndingInNA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .na'

class SiteInfoEndingInNE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ne'

class SiteInfoEndingInNET(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .net'

class SiteInfoEndingInNG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ng'

class SiteInfoEndingInNI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ni'

class SiteInfoEndingInNINJA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ninja'

class SiteInfoEndingInNL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .nl'

class SiteInfoEndingInNO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .no'

class SiteInfoEndingInNP(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .np'

class SiteInfoEndingInNU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .nu'

class SiteInfoEndingInNZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .nz'

class SiteInfoEndingInOM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .om'

class SiteInfoEndingInORG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .org'

class SiteInfoEndingInPA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pa'

class SiteInfoEndingInPARIS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .paris'

class SiteInfoEndingInPE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pe'

class SiteInfoEndingInPF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pf'

class SiteInfoEndingInPG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pg'

class SiteInfoEndingInPH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ph'

class SiteInfoEndingInPICS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pics'

class SiteInfoEndingInPL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pl'

class SiteInfoEndingInPM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pm'

class SiteInfoEndingInPN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pn'

class SiteInfoEndingInPORN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .porn'

class SiteInfoEndingInPR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pr'

class SiteInfoEndingInPT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .pt'

class SiteInfoEndingInPY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .py'

class SiteInfoEndingInQA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .qa'

class SiteInfoEndingInRO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ro'

class SiteInfoEndingInRS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .rs'

class SiteInfoEndingInRU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ru'

class SiteInfoEndingInRW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .rw'

class SiteInfoEndingInSE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .se'

class SiteInfoEndingInSA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sa'

class SiteInfoEndingInSB(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sb'

class SiteInfoEndingInSC(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sc'

class SiteInfoEndingInSD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sd'

class SiteInfoEndingInSEXY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sexy'

class SiteInfoEndingInSG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sg'

class SiteInfoEndingInSI(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .si'

class SiteInfoEndingInSK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sk'

class SiteInfoEndingInSL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sl'

class SiteInfoEndingInSM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sm'

class SiteInfoEndingInSO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .so'

class SiteInfoEndingInSN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sn'

class SiteInfoEndingInSR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sr'

class SiteInfoEndingInST(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .st'

class SiteInfoEndingInSU(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .su'

class SiteInfoEndingInSV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sv'

class SiteInfoEndingInSX(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sx'

class SiteInfoEndingInSY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sy'

class SiteInfoEndingInSZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .sz'

class SiteInfoEndingInTD(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .td'

class SiteInfoEndingInTG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tg'

class SiteInfoEndingInTH(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .th'

class SiteInfoEndingInTJ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tj'

class SiteInfoEndingInTK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tk'

class SiteInfoEndingInTL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tl'

class SiteInfoEndingInTM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tm'

class SiteInfoEndingInTO(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .to'

class SiteInfoEndingInTP(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tp'

class SiteInfoEndingInTR(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tr'

class SiteInfoEndingInTRAVEL(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .travel'

class SiteInfoEndingInTT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tt'

class SiteInfoEndingInTV(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tv'

class SiteInfoEndingInTW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tw'

class SiteInfoEndingInTZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .tz'

class SiteInfoEndingInUA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ua'

class SiteInfoEndingInUG(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ug'

class SiteInfoEndingInUK(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .uk'

class SiteInfoEndingInUS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .us'

class SiteInfoEndingInUY(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .uy'

class SiteInfoEndingInUZ(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .uz'

class SiteInfoEndingInVA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .va'

class SiteInfoEndingInVE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ve'

class SiteInfoEndingInVN(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .vn'

class SiteInfoEndingInWF(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .wf'

class SiteInfoEndingInWS(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ws'

class SiteInfoEndingInXML(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .xml'

class SiteInfoEndingInXXX(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .xxx'

class SiteInfoEndingInYE(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .ye'

class SiteInfoEndingInYT(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .yt'

class SiteInfoEndingInZM(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .zm'

class SiteInfoEndingInZA(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .za'

class SiteInfoEndingInZW(SiteInfo):
    class Meta:
        proxy = True
        verbose_name_plural = 'Site Infos Ending With .zw'

# Model for holding a point-in-time snapshot of the index statistics.
class IndexStats(models.Model):
    num_excluded = models.IntegerField()
    # JSON data for the number of URLs crawled, terms indexed, and pending indexes.
    langs = models.TextField()
    total_urls = models.IntegerField()
    total_indexes = models.IntegerField()
    total_pendingindexes = models.IntegerField()
    create_date = models.DateField(auto_now_add=True)
    most_linked_to_domains = models.TextField()
    last_most_linked_to = models.DateField(null=True, blank=True)
    generation_time = models.DecimalField(null=True, blank=True, decimal_places=2, max_digits=8)

    def __str__(self):
        return 'Index Stats on ' + str(self.create_date)

    class Meta:
        in_db = 'indexes'
        ordering = ['-create_date', ]
        verbose_name_plural = 'Index Stats'

# Model for holding a monthly report of the most popular searches.
class MonthlySearchReport(models.Model):
    language = models.CharField(max_length=3)
    total_searches = models.IntegerField()
    month = models.IntegerField()
    year = models.IntegerField()
    # JSON data for the search term and number of times found.
    top_searches = models.TextField()
    create_date = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.language + ' search report for ' + str(self.year) + '-' + str(self.month)

    class Meta:
        in_db = 'indexes'
        ordering = ['-year', '-month', 'language']

class PageLink(models.Model):
    rooturl_source = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    url_source = models.CharField(max_length=2048, blank=True, null=False, db_index=True)
    url_destination = models.CharField(max_length=2048, blank=True, null=False)
    rooturl_destination = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    anchor_text = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return self.url_source + ' links to ' + self.url_destination

    class Meta:
        in_db = 'urls'

class KeywordRank(models.Model):
    keywords = models.CharField(max_length=240, unique=False, db_index=True)
    rank = models.IntegerField()
    rooturl = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    show = models.BooleanField(default=True, blank=True)

    def __str__(self):
        return self.rooturl + ' ranks ' + str(self.rank) + ' for ' + self.keywords

    class Meta:
        in_db = 'indexes'
        abstract = True

class KeywordRanking(KeywordRank):
    pass

class KeywordRanking_cs(KeywordRank):
    pass

class KeywordRanking_de(KeywordRank):
    pass

class KeywordRanking_el(KeywordRank):
    pass

class KeywordRanking_es(KeywordRank):
    pass

class KeywordRanking_fi(KeywordRank):
    pass

class KeywordRanking_fr(KeywordRank):
    pass

class KeywordRanking_hu(KeywordRank):
    pass

class KeywordRanking_it(KeywordRank):
    pass

class KeywordRanking_nl(KeywordRank):
    pass

class KeywordRanking_pl(KeywordRank):
    pass

class KeywordRanking_pt(KeywordRank):
    pass

class KeywordRanking_sv(KeywordRank):
    pass

class KeywordRanking_tr(KeywordRank):
    pass

class QueryParameter(models.Model):
    """
    Represents a URL query parameter that should be changed or removed for a site.

    For example, to change affiliate codes on www.amazon.com, set the parameter to 'tag', the domain to 'www.amazon.com',
    the replace_with to 'zetacentauri-20', the remove_before_crawl to True, the remove_or_replace_after_crawl to True.

    To remove the session IDs for a site, set remove_before_crawl and remove_after_crawl both to True for a parameter.
    """
    parameter = models.CharField(max_length=60, unique=False)
    domain = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    replace_with = models.CharField(max_length=100, blank=True, null=True, help_text='What should the parameter contents be replaced with? If blank, the tag will be removed.')
    # These two are separate so we can have a situation where a tag is removed before crawl and then replaced after crawl.
    remove_before_crawl = models.BooleanField(blank=True, default=False, help_text='Should this parameter be removed before crawling?')
    replace_before_crawl = models.BooleanField(blank=True, default=False, help_text='Should this parameter be replaced before crawling?')
    remove_or_replace_after_crawl = models.BooleanField(blank=True, default=True, help_text='Should this parameter be removed or replaced after crawling?')
    only_replace_if_present = models.BooleanField(blank=True, default=False, help_text='Only replace the URL parameter if it is already present.')

    def __str__(self):
        return 'Change parameter {0} for {1}'.format(self.parameter, self.domain)

    class Meta:
        in_db = 'urls'

class PageIFrame(models.Model):
    rooturl_source = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    url_source = models.CharField(max_length=2048, blank=True, null=False, db_index=True)
    url_destination = models.CharField(max_length=2048, blank=True, null=False)
    rooturl_destination = models.CharField(max_length=260, blank=True, null=False)

    def __str__(self):
        return self.url_source + ' has an iframe to ' + self.url_destination

    class Meta:
        in_db = 'urls'

class PageJavaScript(models.Model):
    rooturl_source = models.CharField(max_length=260, blank=True, null=False, db_index=True)
    url_source = models.CharField(max_length=2048, blank=True, null=False, db_index=True)
    url_destination = models.CharField(max_length=2048, blank=True, null=False)
    rooturl_destination = models.CharField(max_length=260, blank=True, null=False)
    filename = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return self.url_source + ' loads the JavaScript at ' + self.url_destination

    class Meta:
        in_db = 'urls'

class DMCANotice(models.Model):
    date = models.DateField()
    sender = models.CharField(max_length=240)
    url = models.CharField(max_length=240)
    contents = models.TextField()
    validity = models.TextField()
    action_taken = models.TextField()
    notes = models.TextField(null=True, blank=True)

    class Meta:
        in_db = 'indexes'

class NewsSite(models.Model):
    """
    Represents a news site meant to be included in news search.
    """
    url = models.CharField(max_length=260, blank=True, null=False, db_index=True)

    def __str__(self):
        return self.url

    class Meta:
        in_db = 'news'

class AutoCompleteBase(models.Model):
    keywords = models.TextField(unique=False, db_index=True)
    score = models.IntegerField()

    class Meta:
        in_db = 'indexes'
        ordering = ['-score', ]
        abstract = True

class AutoComplete(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_cs(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_de(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_el(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_es(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_fi(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_fr(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_hu(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_it(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_nl(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_pl(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_pt(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_sv(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class AutoComplete_tr(AutoCompleteBase):

    def __str__(self):
        return self.keywords

class ResultClickBase(models.Model):
    keywords = models.TextField(unique=False)
    search_id = models.UUIDField(null=True, editable=False, db_index=True)
    position = models.IntegerField()
    ip = models.CharField(max_length=16, blank=True, null=True, unique=False)
    url = models.TextField(blank=False, db_index=True)
    click_time = models.DateTimeField(auto_now_add=True)
    xpos = models.IntegerField(null=True, blank=True)
    ypos = models.IntegerField(null=True, blank=True)

    class Meta:
        in_db = 'indexes'
        abstract = True

    def __str__(self):
        return '{0} at position {1} in search {2}'.format(self.url, self.position, self.keywords)

class ResultClick(ResultClickBase):
    pass

class ResultClick_cs(ResultClickBase):
    pass

class ResultClick_da(ResultClickBase):
    pass

class ResultClick_de(ResultClickBase):
    pass

class ResultClick_el(ResultClickBase):
    pass

class ResultClick_es(ResultClickBase):
    pass

class ResultClick_fi(ResultClickBase):
    pass

class ResultClick_fr(ResultClickBase):
    pass

class ResultClick_hu(ResultClickBase):
    pass

class ResultClick_is(ResultClickBase):
    pass

class ResultClick_it(ResultClickBase):
    pass

class ResultClick_nl(ResultClickBase):
    pass

class ResultClick_no(ResultClickBase):
    pass

class ResultClick_pl(ResultClickBase):
    pass

class ResultClick_pt(ResultClickBase):
    pass

class ResultClick_sk(ResultClickBase):
    pass

class ResultClick_sv(ResultClickBase):
    pass

class ResultClick_tr(ResultClickBase):
    pass

class APIUser(models.Model):
    name = models.CharField(max_length=100)
    userid = models.IntegerField(null=True, blank=True)

    class Meta:
        in_db = 'indexes'

class APIToken(models.Model):
    user = models.ForeignKey(APIUser)
    key = models.CharField(max_length=64)

    class Meta:
        in_db = 'indexes'

class APISubscription(models.Model):
    user = models.ForeignKey(APIUser)
    monthly_calls = models.IntegerField(default=5000)
    expires = models.DateField()

    class Meta:
        in_db = 'indexes'

class APIUsage(models.Model):
    user = models.ForeignKey(APIUser)
    month = models.IntegerField()
    year = models.IntegerField()
    calls_used = models.IntegerField(default=0)

    class Meta:
        in_db = 'indexes'


if 'an' in language_list:

    class SiteInfo_an(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_an(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_an(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_an(KeywordRank):
        pass

    class SearchLog_an(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_an(ResultClickBase):
        pass

    class AutoComplete_an(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'ca' in language_list:

    class SiteInfo_ca(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_ca(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_ca(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_ca(KeywordRank):
        pass

    class SearchLog_ca(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_ca(ResultClickBase):
        pass

    class AutoComplete_ca(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'cy' in language_list:

    class SiteInfo_cy(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_cy(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_cy(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_cy(KeywordRank):
        pass

    class SearchLog_cy(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_cy(ResultClickBase):
        pass

    class AutoComplete_cy(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'et' in language_list:

    class SiteInfo_et(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_et(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_et(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_et(KeywordRank):
        pass

    class SearchLog_et(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_et(ResultClickBase):
        pass

    class AutoComplete_et(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'eu' in language_list:

    class SiteInfo_eu(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_eu(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_eu(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_eu(KeywordRank):
        pass

    class SearchLog_eu(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_eu(ResultClickBase):
        pass

    class AutoComplete_eu(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'gl' in language_list:

    class SiteInfo_gl(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_gl(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_gl(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_gl(KeywordRank):
        pass

    class SearchLog_gl(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_gl(ResultClickBase):
        pass

    class AutoComplete_gl(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'ha' in language_list:

    class SiteInfo_ha(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_ha(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_ha(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_ha(KeywordRank):
        pass

    class SearchLog_ha(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_ha(ResultClickBase):
        pass

    class AutoComplete_ha(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'hr' in language_list:

    class SiteInfo_hr(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_hr(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_hr(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_hr(KeywordRank):
        pass

    class SearchLog_hr(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_hr(ResultClickBase):
        pass

    class AutoComplete_hr(AutoCompleteBase):

        def __str__(self):
            return self.keywords

if 'lt' in language_list:

    class SiteInfo_lt(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_lt(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_lt(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_lt(KeywordRank):
        pass

    class SearchLog_lt(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_lt(ResultClickBase):
        pass

    class AutoComplete_lt(AutoCompleteBase):

        def __str__(self):
            return self.keywords

if 'lv' in language_list:

    class SiteInfo_lv(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_lv(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_lv(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_lv(KeywordRank):
        pass

    class SearchLog_lv(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_lv(ResultClickBase):
        pass

    class AutoComplete_lv(AutoCompleteBase):

        def __str__(self):
            return self.keywords

if 'ro' in language_list:

    class SiteInfo_ro(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_ro(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_ro(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_ro(KeywordRank):
        pass

    class SearchLog_ro(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_ro(ResultClickBase):
        pass

    class AutoComplete_ro(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'rw' in language_list:

    class SiteInfo_rw(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_rw(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_rw(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_rw(KeywordRank):
        pass

    class SearchLog_rw(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_rw(ResultClickBase):
        pass

    class AutoComplete_rw(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'sl' in language_list:

    class SiteInfo_sl(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_sl(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_sl(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_sl(KeywordRank):
        pass

    class SearchLog_sl(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_sl(ResultClickBase):
        pass

    class AutoComplete_sl(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'sn' in language_list:

    class SiteInfo_sn(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_sn(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_sn(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_sn(KeywordRank):
        pass

    class SearchLog_sn(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_sn(ResultClickBase):
        pass

    class AutoComplete_sn(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'so' in language_list:

    class SiteInfo_so(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_so(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_so(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_so(KeywordRank):
        pass

    class SearchLog_so(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_so(ResultClickBase):
        pass

    class AutoComplete_so(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'sw' in language_list:

    class SiteInfo_sw(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_sw(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_sw(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_sw(KeywordRank):
        pass

    class SearchLog_sw(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_sw(ResultClickBase):
        pass

    class AutoComplete_sw(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'wo' in language_list:

    class SiteInfo_wo(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_wo(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_wo(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_wo(KeywordRank):
        pass

    class SearchLog_wo(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_wo(ResultClickBase):
        pass

    class AutoComplete_wo(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'xh' in language_list:

    class SiteInfo_xh(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_xh(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_xh(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_xh(KeywordRank):
        pass

    class SearchLog_xh(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_xh(ResultClickBase):
        pass

    class AutoComplete_xh(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'yo' in language_list:

    class SiteInfo_yo(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_yo(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_yo(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_yo(KeywordRank):
        pass

    class SearchLog_yo(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_yo(ResultClickBase):
        pass

    class AutoComplete_yo(AutoCompleteBase):

        def __str__(self):
            return self.keywords


if 'zu' in language_list:

    class SiteInfo_zu(URLInfo):

        def __str__(self):
            return self.url

    class PendingIndex_zu(PendingIndexBase):

        def __str__(self):
            return self.keywords

    class IndexTerm_zu(IndexTermBase):

        def __str__(self):
            return self.keywords

    class KeywordRanking_zu(KeywordRank):
        pass

    class SearchLog_zu(SearchLogBase):

        def __str__(self):
            return self.keywords

    class ResultClick_zu(ResultClickBase):
        pass

    class AutoComplete_zu(AutoCompleteBase):

        def __str__(self):
            return self.keywords
